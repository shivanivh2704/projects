import pandas as pd
df= pd.read_csv(r"C:\Users\dazvi\OneDrive\Documents\BMS 5TEAM.csv")
df
total_nan = df.isna().sum().sum()
print(f'Total number of NaN values: {total_nan}')

# Calculate the number of NaN values per column
nan_per_column = df.isna().sum()

# Identify the column with the most NaN values
column_with_most_nan = nan_per_column.idxmax()
max_nan_count = nan_per_column.max()
print(f'Column with the most NaN values: {column_with_most_nan}')
print(f'Number of NaN values in this column: {max_nan_count}')
df = df.dropna(how='all')

df_cleaned

# Apply formatting to the entire DataFrame for display
df = df.applymap(lambda x: '%.2f' % x if isinstance(x, (int, float)) else x)

# Display the formatted DataFrame
df
# Set the float format to avoid scientific notation
pd.set_option('display.float_format', lambda x: '%.2f' % x)

# Ensure all values are converted to float if necessary
df = df.applymap(lambda x: float(x) if isinstance(x, (int, float)) else x)

# Print the entire DataFrame
print(df)
# Convert all float values to int
df = df.applymap(lambda x: int(x) if isinstance(x, float) else x)

# Alternatively, if you want to convert all columns of float type to int
df = df.apply(lambda x: x.astype(int) if x.dtype == 'float64' else x)

# Print the DataFrame to verify the changes
print(df)
# Fill NaN values with 0
df_filled = df.fillna(0)

# Print the DataFrame to verify the changes
print(df_filled)
# Remove columns where all values are NaN
df_cleaned = df.dropna(axis=1, how='all')

# Print the cleaned DataFrame to verify the changes
print(df_cleaned)
# Remove the column named 'dropout' and modify df in place
df.drop(columns=['Dropout'], inplace=True)

# Print the DataFrame to verify the changes
print(df)
# Remove the specified columns
df= df.drop(columns=['Mentor', 'Start Date', 'End Date'])

# Print the cleaned DataFrame to verify the changes
print(df)
# Remove the last two columns and modify df in place
df.drop(df.columns[-2:], axis=1, inplace=True)

# Print the cleaned DataFrame to verify the changes
print(df)
# Remove the column named 'head name'
df_cleaned = df.drop(columns=['Family Head Name'])

# Print the cleaned DataFrame to verify the changes
print(df_cleaned)
# Rename the column 'partner ID' to 'Batch ID'
df.rename(columns={'Partner ID': 'Batch ID'}, inplace=True)

# Print the DataFrame to verify the changes
print(df)
# Convert 'DOB' to datetime, invalid parsing will be set as NaT
df['DOB'] = pd.to_datetime(df['DOB'], format='%d-%m-%Y', errors='coerce')

# Drop rows with invalid dates (NaT values)
df = df.dropna(subset=['DOB'])

# Filter rows where the month is March (month == 3)
df_march = df[df['DOB'].dt.month == 3]

# Select the 'Name' column (replace 'Name' with the actual column name)
names_march = df_march['First Name']

# Print the names of people born in March
print(names_march)
# Create the 'Name' column by combining 'First Name' and 'Last Name'
df['Name'] = df['First Name'] + ' ' + df['Last Name']

# Optionally, reorder columns to place 'Name' before 'First Name'
columns_order = ['Name'] + [col for col in df.columns if col not in ['Name', 'First Name', 'Last Name']] + ['First Name', 'Last Name']
df = df[columns_order]

# Print the DataFrame to verify the changes
print(df)

# Create the 'Name' column by combining 'First Name' and 'Last Name'
df['Name'] = df['First Name'] + ' ' + df['Last Name']

# Optionally, reorder columns to place 'Name' before 'First Name'
columns_order = ['Name'] + [col for col in df.columns if col not in ['Name', 'First Name', 'Last Name']] + ['First Name', 'Last Name']
df = df[columns_order]

# Print the DataFrame to verify the changes
print(df)

df


# Count the number of occurrences for each gender in the 'Gender' column
gender_counts = df['Gender'].value_counts()

# Print the counts
print(gender_counts)
import matplotlib.pyplot as plt
# Count the number of occurrences for each gender in the 'Gender' column
gender_counts = df['Gender'].value_counts()

# Plot the counts as a bar chart
plt.figure(figsize=(8, 6))
gender_counts.plot(kind='bar', color=['skyblue', 'salmon'])
# Plot the counts as a pie chart
plt.figure(figsize=(8, 8))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', colors=['skyblue', 'salmon'], startangle=140)
plt.title('Gender Distribution')

# Show the plot
plt.show()
# Print the data type of the 'Age' column
print(df['Age'].dtype)

# Convert 'Age' column to numeric, forcing errors to NaN
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')

# Check for any NaN values in the 'Age' column and handle them
print(df['Age'].isna().sum())
df['Age'].fillna(0, inplace=True)  # Replace NaNs with 0 (or another appropriate value)
df['Age'] = df['Age'].astype(int)  # Ensure all values are integers

# Re-check the data type and some sample values
print(df['Age'].dtype)
print(df['Age'].head())
# Convert 'Age' column to numeric, forcing errors to NaN
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')

# Replace NaN values with 0 (or handle them appropriately)
df['Age'].fillna(0, inplace=True)

# Ensure all values are integers
df['Age'] = df['Age'].astype(int)

# Define age groups
bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
labels = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100']
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=True)

# Count the number of people in each age group
age_group_counts = df['Age Group'].value_counts().sort_index()

# Plot the age groups as a bar chart
plt.figure(figsize=(10, 6))
age_group_counts.plot(kind='bar', color='skyblue')
plt.title('Number of People by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of People')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the plot
plt.show()
# Convert 'Age' column to numeric, forcing errors to NaN
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')

# Replace NaN values with 0 (or handle them appropriately)
df['Age'].fillna(0, inplace=True)

# Ensure all values are integers
df['Age'] = df['Age'].astype(int)

# Define the bins and labels for age groups
bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
labels = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100']
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=True)

# Adjust the age groups: Convert '11-20' to '21-30'
df.loc[df['Age Group'] == '11-20', 'Age Group'] = '21-30'

# Count the number of people in each adjusted age group
age_group_counts = df['Age Group'].value_counts().sort_index()

# Plot the updated age groups as a bar chart
plt.figure(figsize=(10, 6))
age_group_counts.plot(kind='bar', color='skyblue')
plt.title('Number of People by Age Group (Adjusted)')
plt.xlabel('Age Group')
plt.ylabel('Number of People')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the plot
plt.show()
# Convert 'Age' column to numeric, forcing errors to NaN
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')

# Replace NaN values with 0 (or handle them appropriately)
df['Age'].fillna(0, inplace=True)

# Ensure all values are integers
df['Age'] = df['Age'].astype(int)

# Count the number of people for each age
age_counts = df['Age'].value_counts().sort_index()

# Plot the age distribution as a pie chart
plt.figure(figsize=(10, 8))
plt.pie(age_counts, labels=age_counts.index, autopct='%1.1f%%', colors=plt.cm.Paired(range(len(age_counts))))
plt.title('Age Distribution of People')
plt.show()
# Define the bins and labels for age groups
bins = [20, 25, 30, 35, 40]
labels = ['20-25', '25-30', '30-35', '35-40']

# Create the 'Age Group' column
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)

# Count the number of people in each age group
age_group_counts = df['Age Group'].value_counts()

# Plot the age group distribution as a pie chart
plt.figure(figsize=(10, 8))
plt.pie(age_group_counts, labels=age_group_counts.index, autopct='%1.1f%%', colors=plt.cm.Paired(range(len(age_group_counts))))
plt.title('Age Distribution (20-40) in Specified Ranges')
plt.show()
# Convert 'Family Size' column to numeric, forcing errors to NaN
df['Family Size'] = pd.to_numeric(df['Family Size'], errors='coerce')

# Replace NaN values with 0 (or handle them appropriately)
df['Family Size'].fillna(0, inplace=True)

# Plot the distribution of family sizes as a histogram
plt.figure(figsize=(10, 6))
plt.hist(df['Family Size'], bins=range(int(df['Family Size'].min()), int(df['Family Size'].max()) + 2), edgecolor='black', color='skyblue')
plt.xlabel('Family Size')
plt.ylabel('Frequency')
plt.title('Histogram of Family Sizes')
plt.show()
